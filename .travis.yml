sudo: required

branches:
  only:
    - master
    - /^v[0-9].[0-9].[0-9]$/
    - /^v[0-9].[0-9].[0-9]-/

jobs:
  include:
    # ensure correct formatting with prettier
    - &test-setup
      stage: test
      language: node_js
      node_js:
        - "8"
      cache:
        yarn: true
        directories:
          - node_modules
      before_install:
        - curl -o- -L https://yarnpkg.com/install.sh | bash -s -- --version 1.3.2
        - export PATH="$HOME/.yarn/bin:$PATH"
      script:
        - yarn run format:ci


    # run jest with test coverage for codeclimate
    # tests need an active instance of mongodb
    - <<: *test-setup
      services:
        # TODO: add redis as a service and include it in integration testing
        - mongodb
      before_script:
        - curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
        - chmod +x ./cc-test-reporter
        - ./cc-test-reporter before-build
      script:
        - mv .env .env.dev
        - mv .env.travis .env
        - yarn test:ci
      after_script:
        - ./cc-test-reporter after-build --exit-code $TRAVIS_TEST_RESULT

    # build all merges into master that are not tagged
    # trigger a new staging deployment
    - &build-setup
      stage: build
      if: (type = push) AND (branch = master)
      addons:
        apt:
          packages:
            - docker-ce
      env:
        - IMAGE_NAME="uzhbf/klicker-api"
      before_script:
        - docker login -u $DOCKER_USER -p $DOCKER_PASSWORD
      script:
        - docker pull $IMAGE_NAME:latest
        - docker build --build-arg API_URL=$STAGING_API_URL --cache-from $IMAGE_NAME:latest -t $IMAGE_NAME:latest .
        - docker push $IMAGE_NAME:latest

    # build all pull requests
    # TODO: review app deployment
    - <<: *build-setup
      if: type = pull_request
      script:
        - docker pull $IMAGE_NAME:nightly
        - docker build --build-arg VERSION=nightly-$TRAVIS_PULL_REQUEST --build-arg API_URL=$STAGING_API_URL --cache-from $IMAGE_NAME:nightly -t $IMAGE_NAME:nightly -t $IMAGE_NAME:nightly-$TRAVIS_PULL_REQUEST .
        - docker push $IMAGE_NAME:nightly
        - docker push $IMAGE_NAME:nightly-$TRAVIS_PULL_REQUEST

    # build unstable tags (e.g. v1.0.0-beta.1)
    # TODO: activate this after 1.0.0
    # - <<: *build-setup
      # if: (type = push) AND (tag =~ /^v[0-9].[0-9].[0-9]-/)
      # script:
        # - docker pull $IMAGE_NAME:latest
        # - docker build --build-arg API_URL=$STAGING_API_URL --cache-from $IMAGE_NAME:latest -t $IMAGE_NAME:$TRAVIS_TAG .
        # - docker push $IMAGE_NAME:$TRAVIS_TAG

    # build stable tags (e.g. v1.0.0)
    # push into APPUiO registry and to Docker Hub
    # => will trigger a deployment on APPUiO
    # TODO: merge the following two jobs once matrix expansion works with stages
    - <<: *build-setup
      # TODO: activate this after 1.0.0
      # if: (type = push) AND (tag =~ /^v[0-9].[0-9].[0-9]$/)
      if: (type = push) AND (tag =~ /^v[1-9].[0-9].[0-9]/)
      env:
        - USER=$DOCKER_USER
        - PASSWORD=$DOCKER_PASSWORD
        - IMAGE_NAME="uzhbf/klicker-api"
      before_script:
        - docker login -u $USER -p $PASSWORD
      script:
        - docker build --build-arg VERSION=$TRAVIS_TAG --build-arg API_URL=$PROD_API_URL --build-arg LOGROCKET=$PROD_LOGROCKET --build-arg SENTRY=$PROD_SENTRY -t $IMAGE_NAME:stable -t $IMAGE_NAME:$TRAVIS_TAG .
        - docker push $IMAGE_NAME:$TRAVIS_TAG
        - docker push $IMAGE_NAME:stable
    - <<: *build-setup
      # TODO: activate this after 1.0.0
      # if: (type = push) AND (tag =~ /^v[0-9].[0-9].[0-9]$/)
      if: (type = push) AND (tag =~ /^v[1-9].[0-9].[0-9]/)
      env:
        - USER="serviceaccount"
        - PASSWORD=$OC_TOKEN
        - REGISTRY="registry.appuio.ch"
        - IMAGE_NAME="registry.appuio.ch/uniz-klicker/klicker-api"
      before_script:
        - docker login -u $USER -p $PASSWORD $REGISTRY
      script:
        - docker build --build-arg VERSION=$TRAVIS_TAG --build-arg API_URL=$PROD_API_URL --build-arg LOGROCKET=$PROD_LOGROCKET --build-arg SENTRY=$PROD_SENTRY -t $IMAGE_NAME:stable -t $IMAGE_NAME:$TRAVIS_TAG .
        - docker push $IMAGE_NAME:$TRAVIS_TAG
        - docker push $IMAGE_NAME:stable
        - >
          curl https://intake.opbeat.com/api/v1/organizations/42f80c969ec741b6a00b8ea8b9079137/apps/3ad047cc8f/releases/
          -H "Authorization: Bearer dd6c1f0d501afec572a1b924df4ed64b2a9b1043"
          -d rev=`git log -n 1 --pretty=format:%H`
          -d branch=`git rev-parse --abbrev-ref HEAD`
          -d status=completed
